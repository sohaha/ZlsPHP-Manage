<?php

namespace Business\ZlsManage;

use Dao\ZlsManage\RulesDao;
use Dao\ZlsManage\RulesRelaDao;
use z;

/**
 * Zls
 * @author        影浅
 * @email         seekwe@gmail.com
 * @copyright     Copyright (c) 2015 - 2017, 影浅, Inc.
 * @link          ---
 * @since         v0.0.1
 * @updatetime    2018-11-08 17:55
 */
class AuthBusiness extends \Zls_Business
{
    /**
     * 验证指定用户是否有指定路由权限
     *
     * @param array|int $user
     * @param array     $condition ['router' => $router,'permission' => $permission]
     * @param array     $regular   ['marks' => $marks, 'routers' => $routers]
     *
     * @return bool|array 如果通过返回true,否则返回禁止的规则详情
     */
    public function userAuth($user, array $condition, array $regular)
    {
        $router = Z::arrayGet($condition, 'router', '');
        if (!$user = is_object($user) ? $user : (new UserBusiness())->info((int)$user)) {
            return ['title' => '未知用户', 'router' => $router];
        }
        // 标识码优先级最高
        $marks      = Z::arrayGet($regular, 'marks', []);
        $permission = Z::arrayGet($condition, 'permission', []);
        $adopt      = false;
        foreach ($permission as $p) {
            if (in_array($p, $marks, true)) {
                $adopt = true;
                break;
            }
        }
        $ban          = ['title' => '没有找到匹配规则', 'router' => $router];
        $routers      = Z::arrayGet($regular, 'routers', []);
        $rules        = [];
        $banRules     = [];
        $rulesRelaDao = new RulesRelaDao();
        $normalState  = $rulesRelaDao::STATUS_NORMAL;
        $banState     = $rulesRelaDao::STATUS_BAN;
        foreach ($routers as $r) {
            if ($r['status'] === $normalState) {
                $rules[] = $r;
            } elseif ($r['status'] === $banState) {
                $banRules[] = $r;
            }
        }
        // 标识码不通过，判断路由
        if (!$adopt) {
            foreach ($rules as $rule) {
                if ($this->verify($router, $rule['mark'], $rule['condition'], $user)) {
                    $adopt = true;
                    break;
                }
            }
        }
        if ($adopt) {
            foreach ($banRules as $rule) {
                if ($this->verify($router, $rule['mark'], $rule['condition'], $user)) {
                    $adopt = false;
                    $ban   = $rule;
                    break;
                }
            }
        }

        return !!$adopt ?: $ban;
    }

    private function verify($router, $rule, $condition, $user)
    {
        $rs       = false; //extract
        $ruleData = explode('::', strtolower($rule));
        $rule     = $ruleData[0];
        $type     = z::arrayGet($ruleData, 1);
        if (!!$type && (strtolower(Z::server('REQUEST_METHOD', '')) !== $type)) {

            return $rs;
        }
        if ($rule !== $router) {
            $matches = str_replace('*', '(.*)', $rule);
            $matches = str_replace('/', '\/', $matches);
            $rs      = preg_match('/' . $matches . '/i', $router);
        } else {
            $rs = true;
        }
        // todo 待完成
        if (false || $rs && $condition) {
            if (preg_match_all('/\{(\w*?):(.*?):(.*?)\}/', $condition, $command)) {
                $len = count($command[0]);
                for ($i = 0; $i < $len; $i++) {
                    $k = $command[1][$i];
                    if (z::arrayKeyExists($k, $user)) {
                        switch (trim($command[2][$i])) {
                            case '>':
                                break;
                            default:
                        }
                    }
                }
            }
        }

        return $rs;
    }
}
